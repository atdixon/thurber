* blog: serializing clojure functions -- nod to proxy too
* github: beam tutorial via thurber

* new TimerFamily feature!

* clojure-ify KafkaIO (get-watermark, get-timestamp, etc), JdbcIO, etc, make optional dep
* bump to latest beam release
    * validate dataflow demos after doing this
* switch to namespaced keys ::th/xform etc
* instead of kv->clj, support destructuring KVs first-class,
    including KV<?,Iterable> and KV<?,CoGbkResult>, so that
    for these latter types we can convert Beam's lazy Iterables
    to lazy Clojure seqs!!!

* UnboundedSeqSource needed? or facade beam's own facilities

* window + trigger DSL? overall facade?

* metrics

* dataflow/gaming docs
    * lein with-profile +demo,+dataflow uberjar
    * lein with-profile +demo,+dataflow run -m game.user-score-opt/demo! \
          --appName="thurber-demo/user-score-opt" \
          --runner=DataflowRunner --region=us-central1 --project=atdixon \
          --gcpTempLocation=gs://thurber-demo/gcp-temp \
          --filesToStage=target/thurber-0.0.2-alpha2-SNAPSHOT-standalone.jar \
          --profilingAgentConfiguration='{"APICurated":true}'
    * leaderboard example requires:
        * create topic, dataset, and deploy pipline and running Injector

* inline comps
* fujion
* instead of dynamic thread bindings
    - perhaps:
        (defn doof [& {:as params}] (:process-context params))
        (defn doof [& {:keys [process-context]}] ...process-context...)
    - try and benchmark via user_score_opt
        then compare to user_score... was pushThreadBindings the $$$ part?

* unit test more demos and gaming ports
    - show off redefs

* since type hints for dofn's necessary/good,
    what about context injection by type??? how far could this go?
    (defn foo [^Integer x])
    => #'user/foo
    (meta (ffirst (:arglists (meta #'foo))))
    => {:tag Integer}

* templates support

* docs on ->kv, partial, #'fn-var/DoFn (!!), coders, etc.

* benchmarks

* how extensively can th/proxy be used

* crazy?
    - support destructuring of KV directly in dofns
        - ...with :as foo giving KV val?
        - ...what to do with output emissions?

* https://beam.apache.org/documentation/sdks/java-extensions/

* releases
    * git tag -d 0.0.1-alpha # del local
    * git push origin :tagname # del remote
    * ensure eg 0.0.2-alpha2-SNAPSHOT, then
    * lein javac (sanity check compile), lein test, then
    * lein release :alpha


snippets
---
(defn- dump* [pipeline]
  (.traverseTopologically ^Pipeline pipeline
    (proxy [Pipeline$PipelineVisitor$Defaults] []
      (enterCompositeTransform [n] (println n) (proxy-super enterCompositeTransform n))
      (visitPrimitiveTransform [n] (println n) (proxy-super visitPrimitiveTransform n)))))