* step names
* metrics
*


* link: https://beam.apache.org/get-started/wordcount-example/
*     : https://beam.apache.org/get-started/mobile-gaming-example/


basic
===
* make name optional for comp*
* count-per-key is not a generic xform
*

misc
===
* convert ->extract-sum-and-score-xf example so that KV never
        appears at this api level; need "fujion" then?

test
===
* unit tests all demos, so demos don't regress

code doc
===
* ->kv is powerful, explain it. validate fn args are vars?

nice to haves
===
* {^:th/coder coder/nippy-kv} on dofn fn
* partial* => {:th/params [] ...}

benchmark
===
* nominal checking w/ notes

* profile using dataflow (and compare to java versions)

parsimony
===
* proxy wraps; use for any and all--coder, filename policy, etc.
    - TProxyThing(Var ref, Object... args)
        - args made available as *proxy-args* vector?


misc
===
* https://beam.apache.org/documentation/sdks/java-extensions/ (sorting espesh)


* I think there is something imporant about MaxBy/latestTriggerAndWindow etc.
    ==> but perhaps NOT unless the next agg is over smallish stuff in which case
        use view? or does this MaxBy/**^^ allow for window cleanup?

perf
====
* try avro/abracad coder vs nippy in cases see how it goes

clip
===
* create gs://thurber-demo
* lein with-profile +demo,+experimental,+dataflow uberjar
* lein with-profile +demo,+experimental,+dataflow run -m game.hourly-team-score/demo! \
    --appName="thurber-demo/user-score" \
    --runner=DataflowRunner --region=us-central1 --project=atdixon \
    --gcpTempLocation=gs://thurber-demo/gcp-temp \
    --filesToStage=target/thurber-0.1.0-alpha-standalone.jar

===
* separate demo project using pegged version of thurber
* shade javassist